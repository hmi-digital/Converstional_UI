# Details of a event
# For yaml to avoid CompilationError Exception no comment lines, use double quotes and line feed after every if-then or while-loop { } statement closure
---
tasks:
  - task:
      name: EVT_getARReady
      label: Enable Camera
      entities:
        - entity:
            name: stepCounter
            label: ""
            required: true
            answerType: sys.decision
            fallbackQuestion: "say YES to start"
      action:
        type: groovyAction
        resultMappings:
          - map:
              message: ""
              redirectToTask: EVT_stepProcessor
              resultVarName: "action"
              resultValue: "1"
        returnAnswer: true
        utteranceTemplate: "#result"
        code: '
                import java.io.File;
                import java.nio.file.Files;
                import java.nio.file.Paths;
                import java.util.ArrayList;
                import java.util.List;
                import java.util.regex.Matcher;
                import java.util.regex.Pattern;

                import org.json.JSONArray;
                import org.json.JSONObject;

                String itemFile = new File(".").getAbsolutePath() + "/res/ardata/test.csv";
                File f = new File(itemFile);
                String body = "";

                if (!f.exists()) {
                  System.out.println("Missing item file- " + itemFile.substring((itemFile.lastIndexOf("/")) + 1));
                } else {
                  int n = 1;
                  String recordNo;
                  String line;
                  List<String> lines = Files.readAllLines(Paths.get(itemFile));
                  line = lines.get(n);

                  if (n == 1){
                    recordNo = "first";
                  }
                  else if (n >= lines.size() - 1 || lines.get(n + 1).isEmpty()){
                    recordNo = "last";
                  }
                  else{
                    recordNo = String.valueOf(n);
                  }
                  
                  ArrayList<String> ar = new ArrayList<String>();
                  Pattern pattern = Pattern.compile("\\s*(\"[^\"]*\"|[^,]*)\\s*");
                  Matcher matcher = pattern.matcher(line);
                  int k = 0;

                  while (matcher.find()) {
                    if (k % 2 == 0)
                      ar.add(matcher.group(1).replaceAll("^\"|\"\044", "").trim());
                    k++;
                  }

                  JSONArray itemsArray = new JSONArray();

                  JSONObject item_1 = new JSONObject();
                  item_1.put("step", recordNo);
                  item_1.put("imageOrtext", ar.get(0));
                  item_1.put("label", ar.get(1));
                  item_1.put("info", ar.get(2));
                  item_1.put("position", ar.get(3));
                  item_1.put("scale", ar.get(4));
                  item_1.put("rotation", ar.get(5));
                  item_1.put("color", ar.get(6));
                  item_1.put("target", ar.get(7));
                  itemsArray.put(item_1);

                  JSONObject ARdata = new JSONObject();
                  ARdata.put("overlayItems", itemsArray);

                  JSONObject message = new JSONObject();
                  message.put("chat", ar.get(2));
                  message.put("ARdata", ARdata);

                  JSONObject res = new JSONObject();
                  res.put("message", message);
                  body = res.toString();
                  System.out.println("response: " + body);
                }

                executionResults.put("stepCounter","1");
                executionResults.put("action","1");
                executionResults.put("body",body);
              '
  - task:
      name: EVT_stepProcessor
      label: ""
      entities:
        - entity:
            name: getCommand
            label: ""
            required: true
            answerType: custom.item_ar_commands
            fallbackQuestion: ""
            clarifyQuestion: "Please provide command like Previous or Next or Replay or Exit."
        - entity:
            name: stepCounter
            label: ""
            required: false
            answerType: dummy
            fallbackQuestion: ""
            useContext: true
      action:
        type: groovyAction
        resultMappings:
          - map:
              message: ""
              redirectToTask: start
              resultVarName: "action"
              resultValue: "2"
          - map:
              message: ""
              redirectToTask: EVT_stepProcessor
              resultVarName: "action"
              resultValue: "1"
        returnAnswer: true
        utteranceTemplate: "#result"
        code:
          '
            import java.io.File;
            import java.nio.file.Files;
            import java.nio.file.Paths;
            import java.util.ArrayList;
            import java.util.List;
            import java.util.regex.Matcher;
            import java.util.regex.Pattern;
            import org.codehaus.jettison.json.JSONArray;
            import org.codehaus.jettison.json.JSONObject;

            String stepNo = frame.get("stepCounter");
            int stepNumber = Integer.parseInt(stepNo);
            String command = new String(frame.get("getCommand"));
            
            if (command == "PREV" && stepNumber !=1 ){
               stepNumber = stepNumber - 1;
            }else if (command == "NEXT"){
              stepNumber = stepNumber + 1;
            }else{
              ;
            }

            String itemFile = new File(".").getAbsolutePath() + "/res/ardata/test.csv";
            File f = new File(itemFile);
            String body = "";

            if (!f.exists()) {
              System.out.println("Missing item file- " + itemFile.substring((itemFile.lastIndexOf("/")) + 1));
            } else 
            {
              if (command != "EXIT")
              {
                int n = stepNumber;
                String recordNo = "";
                String line = "";

                List<String> lines = Files.readAllLines(Paths.get(itemFile));
                int totalRecord = lines.size() - 1;
                
                if (stepNumber >= lines.size())
                {
                  stepNumber = stepNumber - 1;
                  n = stepNumber;
                }

                line = lines.get(n);
                if (n == 1){
                  recordNo = "first";
                }
                else if (n >= lines.size() - 1 || lines.get(n + 1).isEmpty()){
                  recordNo = "last";
                }
                else{
                  recordNo = String.valueOf(n);
                }

                ArrayList<String> ar = new ArrayList<String>();
                Pattern pattern = Pattern.compile("\\s*(\"[^\"]*\"|[^,]*)\\s*");
                Matcher matcher = pattern.matcher(line);

                int k = 0;

                while (matcher.find()) {
                  if (k % 2 == 0)
                    ar.add(matcher.group(1).replaceAll("^\"|\"\044", "").trim());
                  k++;
                }

                JSONArray itemsArray = new JSONArray();

                JSONObject item_1 = new JSONObject();
                item_1.put("step", recordNo);
                item_1.put("imageOrtext", ar.get(0));
                item_1.put("label", ar.get(1));
                item_1.put("info", ar.get(2));
                item_1.put("position", ar.get(3));
                item_1.put("scale", ar.get(4));
                item_1.put("rotation", ar.get(5));
                item_1.put("color", ar.get(6));
                item_1.put("target", ar.get(7));
                itemsArray.put(item_1);

                JSONObject ARdata = new JSONObject();
                ARdata.put("overlayItems", itemsArray);

                JSONObject message = new JSONObject();
                message.put("chat", ar.get(2));
                message.put("ARdata", ARdata);

                JSONObject res = new JSONObject();
                res.put("message", message);
                body = res.toString();
                System.out.println("response: " + body);
              }
            }
            
            executionResults.put("stepCounter",String.valueOf(stepNumber));
            if (command == "EXIT"){
              executionResults.put("action","2");
            } else {
              executionResults.put("action","1");
            }

            executionResults.put("body",body);
          '
...
